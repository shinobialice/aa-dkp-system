generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          Int      @id
  username                    String
  class                       String?
  secondary_class             String?
  class_gear_score            Int?
  secondary_class_gear_score  Int?
  vk_name                     String?
  active                      Boolean
  is_eligible_for_salary      Boolean
  joined_at                   DateTime?
  created_at                  DateTime

  inventory                   UserInventory[]
  tasks                       Tasks[]
  raidAttendance              RaidAttendance[]
  tasksAssigned               TasksUser[]
  tags                        UserTags[] @relation("UserTags")

  soldLoot                    Loot[]        @relation("UserSoldLoot")
  lootQueue                   LootQueue[]   

  @@map("user")
}



model UserTags {
  id         Int      @id @default(autoincrement())
  user_id    Int
  tag        String
  created_at DateTime @default(now())

  user       User     @relation(fields: [user_id], references: [id], name: "UserTags")

  @@map("user_tags")
}

model UserInventory {
  id         Int      @id @default(autoincrement())
  user_id    Int
  name       String?
  type       String?
  quality    String?
  quantity   Int      @default(1)
  created_at DateTime

  user       User     @relation(fields: [user_id], references: [id])

  @@map("user_inventory")
}

model Tasks {
  id           Int          @id @default(autoincrement())
  user_id      Int
  name         String?
  completed_at DateTime?
  created_at   DateTime

  user         User         @relation(fields: [user_id], references: [id])
  assignedTo   TasksUser[]  @relation("tasks_assigned")

  @@map("tasks")
}

model Raid {
  id           Int      @id @default(autoincrement())
  type         String?
  is_pvp       Boolean  @default(false)
  is_pvp_long  Boolean  @default(false)
  start_date   DateTime?
  created_at   DateTime @default(now())
  dkp_summary  Int      @default(0)

  raidBosses   RaidBoss[] 
  attendance   RaidAttendance[]

  @@map("raid")
}

model Boss {
  id         Int     @id @default(autoincrement())
  boss_name  String
  dkp_points Int
  category   String

  raidBosses RaidBoss[] 

  @@map("boss")
}

model RaidBoss {
  raid_id Int
  boss_id Int

  raid Raid @relation(fields: [raid_id], references: [id])
  boss Boss @relation(fields: [boss_id], references: [id])

  @@id([raid_id, boss_id])
  @@map("raid_boss")
}




model RaidAttendance {
  id         Int      @id @default(autoincrement())
  user_id    Int
  raid_id    Int
  created_at DateTime

  user       User     @relation(fields: [user_id], references: [id])
  raid       Raid     @relation(fields: [raid_id], references: [id])

  @@map("raid_attendance")
}

model ItemType {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  price      Float?

  loot       Loot[]
  lootQueue  LootQueue[]  

  @@map("item_type")
}


model Loot {
  id               Int       @id @default(autoincrement())
  itemTypeId       Int       @map("item_type_id")  // üëà fix here
  status           String
  acquired_at      DateTime
  sold_at          DateTime?
  sold_to          String?  
  sold_to_user_id  Int?      
  comment          String?
  source           String?
  created_at       DateTime  @default(now())

  itemType         ItemType  @relation(fields: [itemTypeId], references: [id])
  soldToUser       User?     @relation("UserSoldLoot", fields: [sold_to_user_id], references: [id])

  @@map("loot")
}




model TasksUser {
  tasks_user_id Int
  user_id       Int

  task          Tasks     @relation("tasks_assigned", fields: [tasks_user_id], references: [id])
  user          User      @relation(fields: [user_id], references: [id])

  @@id([tasks_user_id, user_id])
  @@map("tasks_user")
}

model LootQueue {
  id              Int      @id @default(autoincrement())
  itemTypeId      Int      @map("item_type_id")
  userId          Int      @map("user_id")
  status          String   @default("–æ–∂–∏–¥–∞–Ω–∏–µ")
  synth_target    String?  // üëà –∏—Å–ø–æ–ª—å–∑—É–µ–º snake_case, –∫–∞–∫ –≤ –ë–î
  required        Int      @default(1)
  delivered       Int      @default(0)
  created_at      DateTime @default(now())

  itemType        ItemType @relation(fields: [itemTypeId], references: [id])
  user            User     @relation(fields: [userId], references: [id])

  @@map("loot_queue")
}
