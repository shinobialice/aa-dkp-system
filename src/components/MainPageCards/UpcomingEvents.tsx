"use client";

import { useEffect, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

const schedule: Record<string, [string, string][]> = {
  –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: [
    ["07:20", "–ê–ì–õ"],
    ["10:00", "–ö–æ—à–∫–∞"],
    ["11:20", "–ê–ì–õ"],
    ["15:20", "–ê–ì–õ"],
    ["19:20", "–ê–ì–õ"],
    ["19:30", "–ö—Ä–∞–∫–µ–Ω"],
    ["20:30", "–ö–∞–ª–∏–¥–∏—Å"],
    ["21:30", "–ê–Ω—Ç–∞–ª–ª–æ–Ω"],
    ["22:00", "–ö–æ—à–∫–∞"],
    ["23:20", "–ê–ì–õ"],
    ["03:20", "–ê–ì–õ"],
  ],
  –í—Ç–æ—Ä–Ω–∏–∫: [
    ["07:20", "–ê–ì–õ"],
    ["10:00", "–ö–æ—à–∫–∞"],
    ["11:20", "–ê–ì–õ"],
    ["15:20", "–ê–ì–õ"],
    ["19:20", "–ê–ì–õ"],
    ["19:30", "–ö—Å–∞–Ω–∞—Ç–æ—Å"],
    ["20:30", "–õ–µ–≤–∏–∞—Ñ–∞–Ω"],
    ["21:30", "–§–µ—Å–∞–Ω–∏–∫—Å"],
    ["22:00", "–ö–æ—à–∫–∞"],
    ["23:20", "–ê–ì–õ"],
    ["03:20", "–ê–ì–õ"],
  ],
  –°—Ä–µ–¥–∞: [
    ["07:20", "–ê–ì–õ"],
    ["10:00", "–ö–æ—à–∫–∞"],
    ["11:20", "–ê–ì–õ"],
    ["15:20", "–ê–ì–õ"],
    ["19:20", "–ê–ì–õ"],
    ["21:00", "–û—Å–∞–¥–∞ –∑–∞–º–∫–∞"],
    ["22:00", "–ö–æ—à–∫–∞"],
    ["23:20", "–ê–ì–õ"],
    ["03:20", "–ê–ì–õ"],
  ],
  –ß–µ—Ç–≤–µ—Ä–≥: [
    ["07:20", "–ê–ì–õ"],
    ["10:00", "–ö–æ—à–∫–∞"],
    ["11:20", "–ê–ì–õ"],
    ["15:20", "–ê–ì–õ"],
    ["19:20", "–ê–ì–õ"],
    ["19:30", "–ö—Ä–∞–∫–µ–Ω"],
    ["20:30", "–õ–µ–≤–∏–∞—Ñ–∞–Ω"],
    ["22:00", "–ö–æ—à–∫–∞"],
    ["23:20", "–ê–ì–õ"],
    ["03:20", "–ê–ì–õ"],
  ],
  –ü—è—Ç–Ω–∏—Ü–∞: [
    ["07:20", "–ê–ì–õ"],
    ["10:00", "–ö–æ—à–∫–∞"],
    ["11:20", "–ê–ì–õ"],
    ["15:20", "–ê–ì–õ"],
    ["19:20", "–ê–ì–õ"],
    ["19:30", "–ö—Å–∞–Ω–∞—Ç–æ—Å"],
    ["20:30", "–ö–∞–ª–∏–¥–∏—Å"],
    ["21:30", "–ê–Ω—Ç–∞–ª–ª–æ–Ω"],
    ["22:00", "–û–±–æ—Ä–æ–Ω–∞ –ò—Ñ–Ω–∏—Ä–∞"],
    ["22:00", "–ö–æ—à–∫–∞"],
    ["23:20", "–ê–ì–õ"],
    ["03:20", "–ê–ì–õ"],
  ],
  –°—É–±–±–æ—Ç–∞: [
    ["07:20", "–ê–ì–õ"],
    ["10:00", "–ö–æ—à–∫–∞"],
    ["11:20", "–ê–ì–õ"],
    ["15:20", "–ê–ì–õ"],
    ["16:00", "–û–±–æ—Ä–æ–Ω–∞ –ò—Ñ–Ω–∏—Ä–∞"],
    ["18:00", "–í–µ–ª–∏–∫–∏–π –ª—É–≥"],
    ["19:20", "–ê–ì–õ"],
    ["19:30", "–ö—Ä–∞–∫–µ–Ω"],
    ["21:00", "–ö–∞–ª–∏–¥–∏—Å"],
    ["22:00", "–ö–æ—à–∫–∞"],
    ["23:20", "–ê–ì–õ"],
    ["03:20", "–ê–ì–õ"],
  ],
  –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: [
    ["07:20", "–ê–ì–õ"],
    ["10:00", "–ö–æ—à–∫–∞"],
    ["11:20", "–ê–ì–õ"],
    ["15:20", "–ê–ì–õ"],
    ["18:00", "–í–µ–ª–∏–∫–∏–π –ª—É–≥"],
    ["18:30", "–§–µ—Å–∞–Ω–∏–∫—Å"],
    ["19:20", "–ê–ì–õ"],
    ["19:30", "–ö—Å–∞–Ω–∞—Ç–æ—Å"],
    ["19:50", "–ê–Ω—Ç–∞–ª–ª–æ–Ω"],
    ["20:30", "–õ–µ–≤–∏–∞—Ñ–∞–Ω"],
    ["22:00", "–ö–æ—à–∫–∞"],
    ["23:20", "–ê–ì–õ"],
    ["03:20", "–ê–ì–õ"],
  ],
};

const dayNames = [
  "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
  "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
  "–í—Ç–æ—Ä–Ω–∏–∫",
  "–°—Ä–µ–¥–∞",
  "–ß–µ—Ç–≤–µ—Ä–≥",
  "–ü—è—Ç–Ω–∏—Ü–∞",
  "–°—É–±–±–æ—Ç–∞",
];

function getMoscowTime(): Date {
  const now = new Date();
  const utc = now.getTime() + now.getTimezoneOffset() * 60000;
  return new Date(utc + 3 * 60 * 60 * 1000);
}

function getDateWithTime(now: Date, timeStr: string, dayOffset = 0): Date {
  const [h, m] = timeStr.split(":").map(Number);
  const d = new Date(now);
  d.setDate(d.getDate() + dayOffset);
  d.setHours(h, m, 0, 0);
  return d;
}

function formatMinutes(mins: number): string {
  const h = Math.floor(Math.abs(mins) / 60);
  const m = Math.abs(mins) % 60;
  if (h === 0) return `${m} –º–∏–Ω`;
  return `${h} —á ${m} –º–∏–Ω`;
}

export default function UpcomingEvents() {
  const [now, setNow] = useState(getMoscowTime());
  const [events, setEvents] = useState<
    {
      boss: string;
      time: string;
      date: Date;
      isNow: boolean;
      startsInMin?: number;
      endsInMin?: number;
    }[]
  >([]);

  useEffect(() => {
    const interval = setInterval(() => {
      const msk = getMoscowTime();
      setNow(msk);

      const result: typeof events = [];

      for (let offset = 0; offset < 7; offset++) {
        const day = dayNames[(msk.getDay() + offset) % 7];
        const dayEvents = schedule[day] || [];

        for (const [time, boss] of dayEvents) {
          const start = getDateWithTime(msk, time, offset);
          const end = new Date(start.getTime() + 60 * 60 * 1000);

          const isNow = msk >= start && msk < end;
          const startsInMin = Math.floor(
            (start.getTime() - msk.getTime()) / 60000
          );
          const endsInMin = isNow
            ? Math.ceil((end.getTime() - msk.getTime()) / 60000)
            : undefined;

          if (startsInMin >= -60) {
            result.push({
              boss,
              time,
              date: start,
              isNow,
              startsInMin,
              endsInMin,
            });
          }

          if (result.length >= 6) break;
        }

        if (result.length >= 6) break;
      }

      setEvents(result.slice(0, 4));
    }, 10_000);

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="flex flex-col gap-4">
      {events.map((e, i) => (
        <Card
          key={i}
          className={
            e.isNow ? "border-primary bg-muted shadow-md" : "opacity-90"
          }
        >
          <CardHeader>
            <CardTitle className="text-base flex items-center justify-between">
              <span>{e.boss}</span>
              {e.isNow && <span className="text-primary text-sm">‚è±</span>}
            </CardTitle>
          </CardHeader>
          <CardContent className="text-sm space-y-1">
            <div>üïì {e.time} –ú–°–ö</div>
            {e.isNow ? (
              <div className="text-xs text-muted-foreground">
                –î–æ –∫–æ–Ω—Ü–∞: {formatMinutes(e.endsInMin ?? 0)}
              </div>
            ) : (
              <div className="text-xs text-muted-foreground">
                –ß–µ—Ä–µ–∑: {formatMinutes(e.startsInMin ?? 0)}
              </div>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  );
}
