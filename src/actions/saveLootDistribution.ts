"use server";

import { prisma } from "@/lib/db";

type LootItem = {
  name: string;
  date: string;
  comment?: string;
};

type Player = {
  id: number; // üëà –∏—Å–ø–æ–ª—å–∑—É–µ–º ID
  loot: LootItem[];
};

export async function saveLootDistribution(players: Player[]) {
  for (const player of players) {
    const user = await prisma.user.findUnique({
      where: { id: player.id },
    });
    if (!user) continue;

    for (const loot of player.loot) {
      if (!loot.date) continue;

      const itemName = loot.comment || loot.name;

      const itemType = await prisma.itemType.findUnique({
        where: { name: itemName },
      });

      if (!itemType) {
        console.warn(`–ü—Ä–µ–¥–º–µ—Ç '${itemName}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ item_type ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω`);
        continue;
      }

      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤—ã–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –±—ã–ª–∞
      await prisma.userInventory.deleteMany({
        where: {
          user_id: user.id,
          name: itemName,
        },
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      await prisma.userInventory.create({
        data: {
          user_id: user.id,
          name: itemName,
          type: "–†–∞–∑–¥–∞—á–∞ –ª—É—Ç–∞",
          created_at: new Date(loot.date),
        },
      });
    }
  }

  return { success: true };
}
